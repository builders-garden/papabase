generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  accessToken              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  campaigns     Campaign[]
  donations     Donation[]
  sessions      Session[]
}

model Campaign {
  id               Int             @id @default(autoincrement())
  name             String          @unique
  description      String
  recipientAddress String          @map("recipient_address")
  githubRepoUrl    String          @map("github_repo_url")
  githubRepoId     String          @map("github_repo_id")
  websiteUrl       String?         @map("website_url")
  status           CampaignStatus? @default(ACTIVE)
  imageUrl         String          @map("image_url")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())
  userId           String
  endDate          DateTime        @map("end_date")
  status           CampaignStatus? @default(ACTIVE)

  xmtpGroupId String? @map("xmtp_group_id")
  xmtpGroupLinkId String? @map("xmtp_group_link_id")

  imageUrl String @map("image_url")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  donations Donation[]
}

model Donation {
  id         Int      @id @default(autoincrement())
  txHash     String   @unique
  amount     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  userId     String
  campaignId Int
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

enum CampaignStatus {
  ACTIVE
  CLOSED
}
