// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id              Int              @id @default(autoincrement())
  address         String           @unique
  name            String?          @unique
  avatarUrl       String?          @map("avatar_url")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())

  donations       Donation[]
  campaigns       Campaign[]
  accounts        Account[]
  sessions        Session[]
}


enum CampaignStatus {
  ACTIVE
  CLOSED
}
model Campaign {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String
  recipientAddress String          @map("recipient_address")
  githubRepoUrl    String          @map("github_repo_url")
  githubRepoId    String           @map("github_repo_id")
  websiteUrl      String?          @map("website_url")
  status          CampaignStatus?   @default(ACTIVE)

  imageUrl       String           @map("image_url")

  xmtpGroupId     String           @map("xmtp_group_id")

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())

  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  
  donations       Donation[]
}

model Donation {
  id              Int              @id @default(autoincrement())
  txHash          String           @unique
  amount          Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  campaign        Campaign         @relation(fields: [campaignId], references: [id])
  campaignId      Int
}